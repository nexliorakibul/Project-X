generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Semester {
  id      Int     @id @default(autoincrement())
  number  Int
  title   String?
  courses Course[]
}

model Course {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  title       String
  type        String    // theory | lab
  credits     Int
  description String?
  outcomes    String?
  grading     String?
  references  String?
  semester    Semester  @relation(fields: [semesterId], references: [id])
  semesterId  Int

  resources Resource[]
  ideas     Idea[]
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  type        String   // pastpaper | assignment | lab | slide | link | code
  fileUrl     String?
  linkUrl     String?
  examYear    Int?
  term        String?  // CT | Mid | Final | None
  tags        String[]
  isOfficial  Boolean  @default(false)
  status      String   @default("pending") // pending | approved | rejected
  createdAt   DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  uploader   User?  @relation(fields: [uploaderId], references: [id])
  uploaderId Int?
}

model Idea {
  id              Int      @id @default(autoincrement())
  title           String
  summary         String
  difficulty      Int
  tags            String[]
  stack           String[]
  estimatedWeeks  Int?
  deliverables    String[]

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  role      String   @default("student") // student | ta | faculty | admin
  reputation Int     @default(0)

  resources Resource[]
}

model Approval {
  id         Int      @id @default(autoincrement())
  targetType String   // resource | idea
  targetId   Int
  decision   String   // approved | rejected | fix
  notes      String?
  decidedAt  DateTime @default(now())

  approver   User?    @relation(fields: [approverId], references: [id])
  approverId Int?
}

model Report {
  id         Int      @id @default(autoincrement())
  targetType String
  targetId   Int
  reason     String
  status     String   @default("open")
  createdAt  DateTime @default(now())

  reporter   User?    @relation(fields: [reporterId], references: [id])
  reporterId Int?
}
